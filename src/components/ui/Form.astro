---
import { Image } from "astro:assets";
import decorForm from "../../assets/pics/contact-pic.png";
---

<div
  class="rounded-base relative flex items-center justify-start overflow-hidden bg-gray-100 p-8 shadow-lg md:p-12"
>
  <form id="contactForm" class="bg-gray h-full w-full lg:max-w-lg">
    <div class="mb-4">
      <label for="name" class="mb-2 block text-black">Name*</label>
      <input
        type="text"
        id="name"
        name="name"
        placeholder="Name"
        required
        class="w-full rounded-xl border border-black px-8 py-5 text-black outline-none"
      />
    </div>

    <div class="mb-4">
      <label for="email" class="mb-2 block text-black">Email*</label>
      <input
        type="email"
        id="email"
        name="email"
        placeholder="Email"
        required
        class="w-full rounded-xl border border-black px-8 py-5 text-black outline-none"
      />
    </div>

    <div class="mb-4">
      <label for="message" class="mb-2 block text-black">Message*</label>
      <textarea
        id="message"
        name="message"
        placeholder="Message"
        required
        class="w-full rounded-xl border border-black px-8 py-5 text-black outline-none"
      ></textarea>
    </div>

    <div id="formMessage" class="my-4 hidden text-center"></div>

    <button type="submit" id="submitBtn" class="btn-primary w-full">
      <span id="buttonText">Send</span>
      <span id="loadingText" class="hidden">Sending...</span>
    </button>
  </form>
  <picture class="absolute top-1 -right-1/4 bottom-1 hidden lg:block">
    <Image src={decorForm} alt="decor" />
  </picture>
</div>

<script>
  interface ContactFormData {
    name: string;
    email: string;
    message: string;
  }

  async function submitContactForm(formData: ContactFormData): Promise<any> {
    const response = await fetch("https://easyedit.fly.dev/api/contact", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  }

  function showMessage(message: string, isError: boolean = false): void {
    const messageDiv = document.getElementById("formMessage");
    if (!messageDiv) return;

    messageDiv.textContent = message;
    messageDiv.className = `my-4 text-center ${isError ? "text-red-600" : "text-green-600"}`;
    messageDiv.classList.remove("hidden");
  }

  function toggleSubmitButton(isLoading: boolean): void {
    const submitBtn = document.getElementById("submitBtn") as HTMLButtonElement;
    const buttonText = document.getElementById("buttonText");
    const loadingText = document.getElementById("loadingText");

    if (!submitBtn || !buttonText || !loadingText) return;

    if (isLoading) {
      submitBtn.disabled = true;
      buttonText.classList.add("hidden");
      loadingText.classList.remove("hidden");
      submitBtn.classList.add("opacity-50", "cursor-not-allowed");
    } else {
      submitBtn.disabled = false;
      buttonText.classList.remove("hidden");
      loadingText.classList.add("hidden");
      submitBtn.classList.remove("opacity-50", "cursor-not-allowed");
    }
  }

  const contactForm = document.getElementById("contactForm") as HTMLFormElement;
  if (contactForm) {
    contactForm.addEventListener(
      "submit",
      async function (e: Event): Promise<void> {
        e.preventDefault();

        // Get form elements
        const nameInput = document.getElementById("name") as HTMLInputElement;
        const emailInput = document.getElementById("email") as HTMLInputElement;
        const messageInput = document.getElementById(
          "message",
        ) as HTMLTextAreaElement;

        if (!nameInput || !emailInput || !messageInput) return;

        // Get form data
        const formData: ContactFormData = {
          name: nameInput.value.trim(),
          email: emailInput.value.trim(),
          message: messageInput.value.trim(),
        };

        // Basic validation
        if (!formData.name || !formData.email || !formData.message) {
          showMessage("Please fill in all required fields.", true);
          return;
        }

        // Email validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(formData.email)) {
          showMessage("Please enter a valid email address.", true);
          return;
        }

        try {
          toggleSubmitButton(true);

          const result = await submitContactForm(formData);

          // Clear form on success
          contactForm.reset();
          showMessage("Message sent successfully! We'll get back to you soon.");
        } catch (error) {
          console.error("Error submitting form:", error);
          showMessage("Failed to send message. Please try again later.", true);
        } finally {
          toggleSubmitButton(false);
        }
      },
    );
  }
</script>
